#!/bin/bash

#set -x 

# set -e
# set -e was an attempt to add "automatic error detection" to the shell. 
# Its goal was to cause the shell to abort any time an error occurred, so you don't have to put || exit 1 after each important command.
# This does not work well in practice. http://mywiki.wooledge.org/BashFAQ/105

usage()
{
  cat << HELPMessage
gh clone-org [-t TOPIC] [-s QUERY] [-p PATH] [-y] ORG
  ORG
    Github organization. Required if the GITHUB_ORG environment variable is not set.
  -y, --yes
    Clone without prompting for confirmation.
  -p, --path PATH
    Clone path. Default: current directory.
  -t, --topic TOPIC
    Clone repositories with this topic
  -s --search QUERY
    Clone repositories found by this search string. If this is provided '-t' will be ignored.
    Example: -s \"is:public language:go\"
    See: https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-for-repositories
  -j --jq JQ QUERY
  -n, --dry-run
    Do not actually clone, just show what would be cloned
  -h, --help
    Display this message.
HELPMessage
}

# See https://gist.github.com/cdown/1163649
urlencode() {
  # urlencode <string>

  local LANG=C


  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
    local c="${1:$i:1}"
    case $c in
      [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
      *) printf '%%%02X' "'$c'" ;; 
            # %x, %X - Print the argument as an unsigned hexadecimal integer
            # %[flags][width][.precision]specifier
            # %% - Print a literal % symbol.
    esac
  done
}

while [ "$1" != "" ]
do
  case $1 in
    -o | --org ) shift 
      # shift is a bash built-in which kind of removes arguments from the beginning of the argument list
      GITHUB_ORG="$1"
      ;;
    -t | --topic ) shift
      CLONE_TOPIC="$1"
      ;;
    -y | --yes ) ACCEPT_PROMPT="true"
      ;;
    -p | --path ) shift
      CLONE_PATH="$1"
      ;;
    -s | --search ) shift
      SEARCH="$1"
      ;;
    -n | --dry-run) DRY_RUN="true"
      ;;
    -h | --help ) usage
      exit
      ;;
    * ) GITHUB_ORG="$1"
      ;;
  esac
  shift
done

if [ -z "$GITHUB_ORG" ]
then
  echo "Github organization is required"
  usage
  exit 1
fi

JQ_QUERY='.items[].full_name'
QUERY="search/repositories?q=org%3A$GITHUB_ORG"
if [ -n "$SEARCH" ] # String $SEARCH is not null
then
  # $(...) starts a subshell and returns the output
  QUERY+="%20$(urlencode "$SEARCH")"
elif [ -n "$CLONE_TOPIC" ]
then
  QUERY="$QUERY%20topic:$CLONE_TOPIC"
else
  # The search api only returns up to 1000 items. If no additional search params are provided we should
  # use the orgs or users apis so we can get everything.
  JQ_QUERY='.[].full_name'
  if [ "$(gh api "users/$GITHUB_ORG" -q '.type')" = "Organization" ]
  then
    QUERY="orgs/$GITHUB_ORG/repos"
  else
    QUERY="users/$GITHUB_ORG/repos"
  fi
fi

echo "Retrieving the list of repositories: $QUERY"
REPOS=$(gh api --paginate "$QUERY" -q "$JQ_QUERY")

if [ -z "$REPOS" ]
then
  echo "No repositories found"
  exit 1
fi

COUNT=$(echo "$REPOS" | wc -l | tr -d ' ')

if [ -z "$CLONE_PATH" ]
then
  CLONE_PATH="$(pwd)";
fi

if [ "$DRY_RUN" == "true" ]
then
  echo "This would have cloned the following $COUNT repositories to $CLONE_PATH:"
  echo "$REPOS"
  exit 0
fi

if [ "$ACCEPT_PROMPT" != "true" ]
then
  VALID="false"
  echo "Cloning $COUNT repositories to $CLONE_PATH. Continue? Anything other than 'y' or 'l' will terminate"
  while [ "$VALID" = "false" ]
  do
    read -p "[ (y)es | (l)ist ]> " YESNO
    if [ "$YESNO" = "l" ]
    then
      echo "$REPOS"
    elif [ "$YESNO" = "y" ]
    then
      VALID="true"
    else
      exit 1
    fi
  done
else
  echo "Cloning $COUNT repositories to $CLONE_PATH..."
fi

mkdir -p "$CLONE_PATH"
cd "$CLONE_PATH"

#set +e
for repo in $REPOS
do
  d=${repo#$GITHUB_ORG/}
  if [ -d "$d" ]
  then
    echo "'$d' already exists, attempting to checkout the default branch and pull"
    cd "$d"
    default_branch="$(gh api "repos/$repo" -q '.default_branch')"
    git checkout "$default_branch" && git pull
    cd ..
  else
    gh repo clone "$repo"
  fi
done
